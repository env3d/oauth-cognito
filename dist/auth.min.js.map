{"version":3,"sources":["Auth.js"],"names":["STORAGE","AUTH_TOKEN","PKCE_VERIFIER","Auth","baseUrl","clientId","onLogin","loadFromStorage","refreshVerifier","redirect_uri","window","location","origin","pathname","addEventListener","params","URLSearchParams","search","code","get","call","history","pushState","hash","token","JSON","parse","localStorage","getItem","randomString","verifier","base64URLEncode","console","warn","setItem","challenge","sha256","Promise","resolve","reject","authorize","then","t","catch","e","finally","id_token","timeToExpiry","refresh","atob","split","exp","Date","getTime","tokenEndpoint","refresh_token","grant_type","log","body","join","fetch","method","headers","res","json","error","Object","assign","stringify","crypto","getRandomValues","String","fromCharCode","apply","Uint8Array","map","b","randomBytes","loginUrl","href","str","toString","replace","ascii","rightRotate","value","amount","mathPow","i","j","Math","pow","maxWord","words","asciiBitLength","h","k","primeCounter","isComposite","candidate","charCodeAt","w","slice","oldHash","i2","w15","w2","a","temp1","concat","result","push","btoa","from","module","exports"],"mappings":"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","file":"auth.min.js","sourceRoot":"..","sourcesContent":["const STORAGE = {\n  AUTH_TOKEN: 'auth_token',\n  PKCE_VERIFIER: 'auth_verifier'\n};\n\nexport default class Auth {\n  \n  constructor({ baseUrl, clientId, onLogin }) {\n\n    // this.token is now filled, either with an empty object or with tokens\n    this.loadFromStorage();\n    // get the verifier from storage so we can send challenge\n    this.refreshVerifier();\n    \n    this.baseUrl = baseUrl || 'https://operatoroverload.auth.us-west-2.amazoncognito.com';    \n    this.clientId = clientId || '47ile8emo7m8flnhjfuc5aa9i0';    \n    this.redirect_uri = `${window.location.origin}${window.location.pathname}`;\n    \n    window.addEventListener('load', () => {\n      let params = new window.URLSearchParams(window.location.search);\n      this.code = params.get('code');\n      if (this.code && onLogin) onLogin.call(this);\n\n      if (this.code) {\n        window.history.pushState(\n          {}, null, `${window.location.origin}${window.location.pathname}${window.location.hash}`\n        );\n      }\n      \n    });\n  }\n\n  loadFromStorage() {\n    this.token = JSON.parse(window.localStorage.getItem(STORAGE.AUTH_TOKEN)) || {};\n    return this.token;\n  }\n  \n  refreshVerifier( randomString = null ) {\n    // If caller provider randomString, replace the verifier,\n    // otherwise just load it from storage\n    this.verifier = randomString ? base64URLEncode(randomString) :\n      window.localStorage.getItem(STORAGE.PKCE_VERIFIER);\n\n    if (!this.verifier) {\n      console.warn(\"cannot generate or load verifier string, probably first time using this app.  Welcome!\");\n      // prime the store some something\n      this.verifier = 'some random string';\n    }\n    \n    window.localStorage.setItem(STORAGE.PKCE_VERIFIER, this.verifier);\n    \n    this.challenge = base64URLEncode(sha256(this.verifier));\n  }\n  \n  /**\n   * We get a token - only interested in the id_token\n   */\n  getToken() {\n    return new Promise( (resolve, reject) => {\n      if (this.code) {\n        this.authorize()\n          .then( t => resolve(t) )\n          .catch( e => reject(e) )\n          .finally( () => this.code = null );\n      } else if (this.token && this.token.id_token) {\n        if (this.timeToExpiry() > 3570) {\n          resolve(this.token.id_token);\n        } else {\n          this.refresh().then( t => resolve(t) ).catch( e => reject(e) );\n        }\n      } else {\n        reject(\"cannot refresh and not auth code, should start login flow\");\n      }\n    });\n  }\n\n  timeToExpiry(id_token) {\n    id_token = id_token || this.token.id_token;\n    return JSON.parse( window.atob(id_token.split('.')[1]) ).exp - ((new Date()).getTime() / 1000);\n  }\n\n  refresh() {\n    return this.tokenEndpoint( { refresh_token: this.token.refresh_token } );\n  }\n  \n  authorize() {\n    return this.tokenEndpoint( { code: this.code} );\n  }\n  \n  tokenEndpoint( { code: code, refresh_token: refresh_token } ) {\n\n    let grant_type = refresh_token ? 'refresh_token' : 'authorization_code';    \n    console.log(`getting ${grant_type}`);\n    \n    let body = [\n      `client_id=${this.clientId}`,\n      `grant_type=${grant_type}`,      \n      `redirect_uri=${this.redirect_uri}`,\n      refresh_token ? `refresh_token=${refresh_token}` : '',\n      code ? `code=${code}` : '',\n      `code_verifier=${this.verifier}`\n    ].join('&');\n    \n    return new Promise( (resolve, reject) => {\n      window.fetch(`${this.baseUrl}/oauth2/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body\n      }).then( res => {\n        return res.json();\n      }).then( json => {\n        console.log(json);\n        if (json.error) {\n          reject( json );\n        } else {        \n          // save the token in storage and in the object\n          Object.assign(this.token, json);\n          window.localStorage.setItem(STORAGE.AUTH_TOKEN, JSON.stringify(this.token));\n          resolve( json.id_token );\n        }\n      });      \n    });\n  }\n  \n  login() {    \n    let randomString = crypto.getRandomValues ? String.fromCharCode.apply(\n      null, crypto.getRandomValues(new Uint8Array(10)).map( b => b%26 + 97)\n    ) : crypto.randomBytes(32);\n    \n    this.refreshVerifier(randomString);\n    \n    let loginUrl = [\n      `${this.baseUrl}/login?client_id=${this.clientId}`,\n\t    `response_type=code`,\n\t    `scope=email+openid+profile`,\n      `code_challenge=${this.challenge}`,\n      `code_challenge_method=S256`,\n\t    `redirect_uri=${this.redirect_uri}`\n    ].join('&');\n\n    window.location.href = loginUrl;\n  };    \n}\n\n// Support functions\nfunction base64URLEncode(str) {\n    return str.toString('base64')\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=/g, '');\n}\n\n// from https://geraintluff.github.io/sha256/\n// but modified to output base64\nfunction sha256(ascii) {\n\tfunction rightRotate(value, amount) {\n\t\treturn (value>>>amount) | (value<<(32 - amount));\n\t};\n\t\n\tvar mathPow = Math.pow;\n\tvar maxWord = mathPow(2, 32);\n\tvar lengthProperty = 'length'\n\tvar i, j; // Used as a counter across the whole file\n\n\tvar words = [];\n\tvar asciiBitLength = ascii[lengthProperty]*8;\n\t\n\t//* caching results is optional - remove/add slash from front of this line to toggle\n\t// Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes\n\t// (we actually calculate the first 64, but extra values are just ignored)\n\tvar hash = sha256.h = sha256.h || [];\n\t// Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes\n\tvar k = sha256.k = sha256.k || [];\n\tvar primeCounter = k[lengthProperty];\n\t/*/\n\tvar hash = [], k = [];\n\tvar primeCounter = 0;\n\t//*/\n\n\tvar isComposite = {};\n\tfor (var candidate = 2; primeCounter < 64; candidate++) {\n\t\tif (!isComposite[candidate]) {\n\t\t\tfor (i = 0; i < 313; i += candidate) {\n\t\t\t\tisComposite[i] = candidate;\n\t\t\t}\n\t\t\thash[primeCounter] = (mathPow(candidate, .5)*maxWord)|0;\n\t\t\tk[primeCounter++] = (mathPow(candidate, 1/3)*maxWord)|0;\n\t\t}\n\t}\n\t\n\tascii += '\\x80' // Append Ƈ' bit (plus zero padding)\n\twhile (ascii[lengthProperty]%64 - 56) ascii += '\\x00' // More zero padding\n\tfor (i = 0; i < ascii[lengthProperty]; i++) {\n\t\tj = ascii.charCodeAt(i);\n\t\tif (j>>8) return; // ASCII check: only accept characters in range 0-255\n\t\twords[i>>2] |= j << ((3 - i)%4)*8;\n\t}\n\twords[words[lengthProperty]] = ((asciiBitLength/maxWord)|0);\n\twords[words[lengthProperty]] = (asciiBitLength)\n\t\n\t// process each chunk\n\tfor (j = 0; j < words[lengthProperty];) {\n\t\tvar w = words.slice(j, j += 16); // The message is expanded into 64 words as part of the iteration\n\t\tvar oldHash = hash;\n\t\t// This is now the undefinedworking hash\", often labelled as variables a...g\n\t\t// (we have to truncate as well, otherwise extra entries at the end accumulate\n\t\thash = hash.slice(0, 8);\n\t\t\n\t\tfor (i = 0; i < 64; i++) {\n\t\t\tvar i2 = i + j;\n\t\t\t// Expand the message into 64 words\n\t\t\t// Used below if \n\t\t\tvar w15 = w[i - 15], w2 = w[i - 2];\n\n\t\t\t// Iterate\n\t\t\tvar a = hash[0], e = hash[4];\n\t\t\tvar temp1 = hash[7]\n\t\t\t\t+ (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) // S1\n\t\t\t\t+ ((e&hash[5])^((~e)&hash[6])) // ch\n\t\t\t\t+ k[i]\n\t\t\t\t// Expand the message schedule if needed\n\t\t\t\t+ (w[i] = (i < 16) ? w[i] : (\n\t\t\t\t\t\tw[i - 16]\n\t\t\t\t\t\t+ (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15>>>3)) // s0\n\t\t\t\t\t\t+ w[i - 7]\n\t\t\t\t\t\t+ (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2>>>10)) // s1\n\t\t\t\t\t)|0\n\t\t\t\t);\n\t\t\t// This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble\n\t\t\tvar temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) // S0\n\t\t\t\t+ ((a&hash[1])^(a&hash[2])^(hash[1]&hash[2])); // maj\n\t\t\t\n\t\t\thash = [(temp1 + temp2)|0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()\n\t\t\thash[4] = (hash[4] + temp1)|0;\n\t\t}\n\t\t\n\t\tfor (i = 0; i < 8; i++) {\n\t\t\thash[i] = (hash[i] + oldHash[i])|0;\n\t\t}\n\t}\n  \n\tvar result = [];\n\tfor (i = 0; i < 8; i++) {\n\t\tfor (j = 3; j + 1; j--) {\n\t\t\tvar b = (hash[i]>>(j*8))&255;\n\t\t\t//result += ((b < 16) ? 0 : '') + b.toString(16);\n      result.push(b);\n\t\t}\n\t}\n  //return result;  \n\t//return Uint8Array.from(result);\n  \n  return btoa(String.fromCharCode.apply(null, Uint8Array.from(result)));\n};\n\n// Need to use commonjs module export for UMD\n// https://github.com/parcel-bundler/parcel/issues/766\n//\nmodule.exports = Auth;\n"]}